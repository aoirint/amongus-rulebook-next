import type { GetStaticPaths, GetStaticProps, NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import path from 'path'
import fs from 'fs'
import styles from '../../styles/Home.module.css'
import { ParsedUrlQuery } from 'querystring'
import assert from 'assert'
import yaml from 'js-yaml'
import { array, Decoder, number, object, string } from '@mojotech/json-type-validation'

interface Rule {
  name: string
  recommendedParticipants: number
  createdAt: string
  updatedAt: string
  imageUrls: string[]
}

interface Props {
  ruleId: string
  rule: Rule
}

const RulePage: NextPage<Props> = ({
  rule
}) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>{rule.name} - Among Us Rulebook</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          {rule.name}
        </h1>
        <p>
          推奨人数: {rule.recommendedParticipants}
        </p>
        <p>
          {rule.imageUrls.map((imageUrl) => (
            <>
              <Image src={imageUrl} width="640px" height="360px" />
            </>
          ))}
        </p>
      </main>
    </div>
  )
}

interface UrlQuery extends ParsedUrlQuery {
  ruleId: string
}

export const getStaticPaths: GetStaticPaths<UrlQuery> = async () => {
  const ruleDirPath = path.join(process.cwd(), 'public', 'contents', 'rules')
  const ruleFileList = fs.readdirSync(ruleDirPath).filter((file) => fs.lstatSync(path.join(ruleDirPath, file)).isFile() && file.endsWith('.yml'))

  const paths = ruleFileList.map((ruleFile) => {
    const ruleId = ruleFile.substring(0, ruleFile.lastIndexOf('.'))
    return {
      params: {
        ruleId
      }
    }
  })

  return {
    paths,
    fallback: false
  }
}

const ruleDecoder: Decoder<Rule> = object({
  name: string(),
  recommendedParticipants: number(),
  createdAt: string(),
  updatedAt: string(),
  imageUrls: array(string())
})

export const getStaticProps: GetStaticProps<Props, UrlQuery> = async (context) => {
  assert(context.params !== undefined)
  const { ruleId } = context.params

  const ruleDirPath = path.join(process.cwd(), 'public', 'contents', 'rules')
  const ruleFilePath = path.join(ruleDirPath, `${ruleId}.yml`)

  const rawRule = yaml.load(fs.readFileSync(ruleFilePath, {
    encoding: 'utf-8'
  }))
  const rule = ruleDecoder.runWithException(rawRule)

  return {
    props: {
      ruleId,
      rule
    }
  }
}

export default RulePage
